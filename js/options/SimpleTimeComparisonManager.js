import SimpleTimeComparisonUtils from "../utils/SimpleTimeComparisonUtils.js";
import NotificationManager from "./NotificationManager.js";
import { createTimeEntry, createIssue } from "../api/redmine.js";
import JiraRestAPI from "../api/jira-rest.js";

/**
 * –ü—Ä–æ—Å—Ç–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –±–µ–∑ –ª–∏—à–Ω–µ–π —Ö—É–π–Ω–∏
 */
export class SimpleTimeComparisonManager {
  constructor(
    redmineSettingsManager,
    tempoSettingsManager,
    jiraSettingsManager
  ) {
    this.redmineManager = redmineSettingsManager;
    this.tempoManager = tempoSettingsManager;
    this.jiraManager = jiraSettingsManager;
    this.lastResult = null;
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
   */
  init() {
    this.bindElements();
    this.attachEventListeners();
    this.initializeDateSelectors();
  }

  /**
   * –ü—Ä–∏–≤—è–∑–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã DOM
   */
  bindElements() {
    this.elements = {
      section: document.getElementById("simpleTimeComparisonSection"),
      compareButton: document.getElementById("simpleCompareButton"),
      monthSelect: document.getElementById("simpleComparisonMonth"),
      yearSelect: document.getElementById("simpleComparisonYear"),
      resultsContainer: document.getElementById("simpleComparisonResults"),
      summaryContainer: document.getElementById("simpleComparisonSummary"),
      missingContainer: document.getElementById("simpleMissingEntries"),
      createAllButton: document.getElementById("simpleCreateAllButton"),
      exportButton: document.getElementById("simpleExportButton"),
    };
  }

  /**
   * –ü—Ä–∏–≤—è–∑–∞—Ç—å —Å–æ–±—ã—Ç–∏—è
   */
  attachEventListeners() {
    this.elements.compareButton?.addEventListener("click", () =>
      this.performComparison()
    );
    this.elements.createAllButton?.addEventListener("click", () =>
      this.createAllMissingEntries()
    );
    this.elements.exportButton?.addEventListener("click", () =>
      this.exportMissingEntries()
    );
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–∞—Ç—ã
   */
  initializeDateSelectors() {
    const now = new Date();

    // –ó–∞–ø–æ–ª–Ω—è–µ–º –≥–æ–¥–∞
    if (this.elements.yearSelect) {
      const currentYear = now.getFullYear();
      for (let year = currentYear - 2; year <= currentYear + 1; year++) {
        const option = document.createElement("option");
        option.value = year;
        option.textContent = year;
        if (year === currentYear) option.selected = true;
        this.elements.yearSelect.appendChild(option);
      }
    }

    // –ó–∞–ø–æ–ª–Ω—è–µ–º –º–µ—Å—è—Ü—ã
    if (this.elements.monthSelect) {
      const months = [
        "–Ø–Ω–≤–∞—Ä—å",
        "–§–µ–≤—Ä–∞–ª—å",
        "–ú–∞—Ä—Ç",
        "–ê–ø—Ä–µ–ª—å",
        "–ú–∞–π",
        "–ò—é–Ω—å",
        "–ò—é–ª—å",
        "–ê–≤–≥—É—Å—Ç",
        "–°–µ–Ω—Ç—è–±—Ä—å",
        "–û–∫—Ç—è–±—Ä—å",
        "–ù–æ—è–±—Ä—å",
        "–î–µ–∫–∞–±—Ä—å",
      ];

      months.forEach((month, index) => {
        const option = document.createElement("option");
        option.value = index + 1;
        option.textContent = month;
        if (index === now.getMonth()) option.selected = true;
        this.elements.monthSelect.appendChild(option);
      });
    }
  }

  /**
   * –í—ã–ø–æ–ª–Ω–∏—Ç—å —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
   */
  async performComparison() {
    const button = this.elements.compareButton;
    if (!button) return;

    const originalText = button.textContent;
    button.textContent = "üîÑ –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º...";
    button.disabled = true;

    try {
      // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      const redmineSettings = this.redmineManager.getSettings();
      const tempoSettings = this.tempoManager.getSettings();
      const jiraSettings = this.jiraManager.getSettings();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      if (!redmineSettings?.url || !redmineSettings?.apiKey) {
        throw new Error("–ù–∞—Å—Ç—Ä–æ–π —Å–Ω–∞—á–∞–ª–∞ Redmine, –±–ª—è–¥—å!");
      }
      if (!tempoSettings?.apiToken) {
        throw new Error("–ù–∞—Å—Ç—Ä–æ–π —Å–Ω–∞—á–∞–ª–∞ Tempo, —Å—É–∫–∞!");
      }
      if (
        !jiraSettings?.url ||
        !jiraSettings?.email ||
        !jiraSettings?.apiToken
      ) {
        throw new Error("–ù–∞—Å—Ç—Ä–æ–π —Å–Ω–∞—á–∞–ª–∞ Jira, –ø–∏–¥–æ—Ä!");
      }

      // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–∏–æ–¥
      const year =
        parseInt(this.elements.yearSelect?.value) || new Date().getFullYear();
      const month =
        parseInt(this.elements.monthSelect?.value) || new Date().getMonth() + 1;

      console.log(
        `üîç –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –≤—Ä–µ–º—è –∑–∞ ${year}-${month.toString().padStart(2, "0")}`
      );

      // –í—ã–ø–æ–ª–Ω—è–µ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
      const result = await SimpleTimeComparisonUtils.compareTimeEntries(
        year,
        month,
        tempoSettings,
        redmineSettings,
        jiraSettings
      );

      if (result.success) {
        this.lastResult = result;
        this.displayResults(result);

        const stats = result.comparison.stats;
        NotificationManager.success(
          `‚úÖ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ${
            stats.missing
          } –∑–∞–ø–∏—Å–µ–π (${stats.missingHours.toFixed(2)}—á)`
        );
      } else {
        throw new Error(result.error);
      }
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:", error);
      NotificationManager.error(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
      this.clearResults();
    } finally {
      button.textContent = originalText;
      button.disabled = false;
    }
  }

  /**
   * –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
   */
  displayResults(result) {
    if (!this.elements.resultsContainer) return;

    this.elements.resultsContainer.style.display = "block";

    this.displaySummary(result.comparison.stats);
    this.displayMissingEntries(result.comparison.missingInRedmine);

    // –í–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    const hasMissingEntries = result.comparison.missingInRedmine.length > 0;
    if (this.elements.createAllButton) {
      this.elements.createAllButton.disabled = !hasMissingEntries;
    }
    if (this.elements.exportButton) {
      this.elements.exportButton.disabled = !hasMissingEntries;
    }
  }

  /**
   * –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å–≤–æ–¥–∫—É
   */
  displaySummary(stats) {
    if (!this.elements.summaryContainer) return;

    this.elements.summaryContainer.innerHTML = `
      <div class="simple-summary">
        <h3>üìä –°–≤–æ–¥–∫–∞</h3>
        <div class="summary-grid">
          <div class="summary-item">
            <div class="summary-label">Tempo</div>
            <div class="summary-value">${
              stats.tempoTotal
            } –∑–∞–ø–∏—Å–µ–π (${stats.tempoHours.toFixed(2)}—á)</div>
          </div>
          <div class="summary-item">
            <div class="summary-label">Redmine</div>
            <div class="summary-value">${
              stats.redmineTotal
            } –∑–∞–ø–∏—Å–µ–π (${stats.redmineHours.toFixed(2)}—á)</div>
          </div>
          <div class="summary-item ${
            stats.missing > 0 ? "warning" : "success"
          }">
            <div class="summary-label">–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç</div>
            <div class="summary-value">${
              stats.missing
            } –∑–∞–ø–∏—Å–µ–π (${stats.missingHours.toFixed(2)}—á)</div>
          </div>
          <div class="summary-item success">
            <div class="summary-label">–ù–∞–π–¥–µ–Ω–æ</div>
            <div class="summary-value">${stats.matched} –∑–∞–ø–∏—Å–µ–π</div>
          </div>
        </div>
      </div>
    `;
  }

  /**
   * –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏
   */
  displayMissingEntries(missingEntries) {
    if (!this.elements.missingContainer) return;

    if (missingEntries.length === 0) {
      this.elements.missingContainer.innerHTML = `
        <div class="no-missing">
          <h3>‚úÖ –í—Å—ë –Ω–∞–π–¥–µ–Ω–æ!</h3>
          <p>–í—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ Tempo –µ—Å—Ç—å –≤ Redmine.</p>
        </div>
      `;
      return;
    }

    const entriesHtml = missingEntries
      .map((entry, index) => {
        const entryId = `entry-${entry.date}-${entry.hours}-${
          entry.jiraTask || "no-jira"
        }`;
        return `
      <tr class="missing-entry" data-entry-id="${entryId}" data-index="${index}">
        <td>${entry.date}</td>
        <td>${entry.hours.toFixed(2)}—á</td>
        <td class="description">${entry.description || "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"}</td>
        <td class="jira-task">
          ${
            entry.jiraTask
              ? `<a href="${this.getJiraUrl(
                  entry.jiraTask
                )}" target="_blank" class="jira-link">${entry.jiraTask}</a>`
              : "–ù–µ—Ç –∑–∞–¥–∞—á–∏"
          }
        </td>
        <td class="redmine-task">
          ${
            entry.redmineTask
              ? `<a href="${this.getRedmineUrl(
                  entry.redmineTask
                )}" target="_blank" class="redmine-link">#${
                  entry.redmineTask
                }</a>`
              : "–ù–µ –Ω–∞–π–¥–µ–Ω–∞"
          }
        </td>
        <td class="actions">
          <button class="btn-small create-btn" data-index="${index}">
            ‚ûï –°–æ–∑–¥–∞—Ç—å
          </button>
        </td>
      </tr>
    `;
      })
      .join("");

    this.elements.missingContainer.innerHTML = `
      <div class="missing-entries">
        <h3>‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏ (${missingEntries.length})</h3>
        <table class="missing-table">
          <thead>
            <tr>
              <th>–î–∞—Ç–∞</th>
              <th>–í—Ä–µ–º—è</th>
              <th>–û–ø–∏—Å–∞–Ω–∏–µ</th>
              <th>Jira –∑–∞–¥–∞—á–∞</th>
              <th>Redmine –∑–∞–¥–∞—á–∞</th>
              <th>–î–µ–π—Å—Ç–≤–∏—è</th>
            </tr>
          </thead>
          <tbody>
            ${entriesHtml}
          </tbody>
        </table>
      </div>
    `;

    // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Å–æ–∑–¥–∞–Ω–∏—è
    this.elements.missingContainer
      .querySelectorAll(".create-btn")
      .forEach((btn) => {
        btn.addEventListener("click", (e) => {
          const index = parseInt(e.target.dataset.index);
          this.createEntry(missingEntries[index]);
        });
      });
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –≤ Redmine
   */
  async createEntry(entry) {
    NotificationManager.info(`üîÑ –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –¥–ª—è ${entry.date}...`);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
    this.updateEntryVisualState(entry, "creating");

    try {
      const redmineSettings = this.redmineManager.getSettings();
      const jiraSettings = this.jiraManager.getSettings();

      let redmineTaskId = entry.redmineTask;

      // –ï—Å–ª–∏ –Ω–µ—Ç Redmine –∑–∞–¥–∞—á–∏, –Ω–æ –µ—Å—Ç—å Jira –∑–∞–¥–∞—á–∞ - —Å–æ–∑–¥–∞—ë–º Redmine –∑–∞–¥–∞—á—É
      if (!redmineTaskId && entry.jiraTask) {
        redmineTaskId = await this.createRedmineTaskForJira(
          entry.jiraTask,
          redmineSettings,
          jiraSettings
        );
      }

      // –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –≤—Ä–µ–º–µ–Ω–∏
      const timeEntryData = {
        date: entry.date,
        time: entry.hours,
        comment: entry.description, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —á—Ç–æ –∏ –≤ Tempo
        isResearch: false,
      };

      if (redmineTaskId) {
        timeEntryData.task = redmineTaskId.toString();
      } else {
        // –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–¥–∞—á–∏, —Å–æ–∑–¥–∞—ë–º –Ω–∞ —Å–≤—è–∑–∞–Ω–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–º
        const linkedProject = await this.getLinkedProject();
        timeEntryData.projectId =
          linkedProject || redmineSettings.projectId || "1";
      }

      const createTimeResult = await createTimeEntry(
        timeEntryData,
        redmineSettings
      );

      if (createTimeResult.success) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –∑–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞
        this.updateEntryVisualState(entry, "created");

        NotificationManager.success(
          `‚úÖ –ó–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞! ${entry.hours.toFixed(2)}—á –Ω–∞ ${
            redmineTaskId ? `#${redmineTaskId}` : "–ø—Ä–æ–µ–∫—Ç"
          }`
        );

        // –ï—Å–ª–∏ —Å–æ–∑–¥–∞–ª–∏ –Ω–æ–≤—É—é Redmine –∑–∞–¥–∞—á—É, –ø—Ä–æ—Å—Ç–∞–≤–ª—è–µ–º –µ—ë –≤—Å–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–º –∑–∞–ø–∏—Å—è–º —Å —Ç–æ–π –∂–µ Jira –∑–∞–¥–∞—á–µ–π
        if (entry.jiraTask && redmineTaskId && !entry.redmineTask) {
          this.updateOtherEntriesWithSameJiraTask(
            entry.jiraTask,
            redmineTaskId
          );
        }

        // –£–±–∏—Ä–∞–µ–º –∑–∞–ø–∏—Å—å –∏–∑ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö
        this.removeEntryFromDisplay(entry);
      } else {
        throw new Error(createTimeResult.error);
      }
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏:", error);
      NotificationManager.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏: ${error.message}`);
    }
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å Redmine –∑–∞–¥–∞—á—É –¥–ª—è Jira –∑–∞–¥–∞—á–∏
   */
  async createRedmineTaskForJira(jiraTaskKey, redmineSettings, jiraSettings) {
    console.log(`üé´ –°–æ–∑–¥–∞—ë–º Redmine –∑–∞–¥–∞—á—É –¥–ª—è Jira ${jiraTaskKey}`);

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Jira –∑–∞–¥–∞—á–µ
    const jiraResult = await JiraRestAPI.getIssue(jiraTaskKey, jiraSettings, [
      "summary",
      "description",
      "priority",
      "status",
    ]);

    if (!jiraResult.success) {
      throw new Error(
        `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å Jira –∑–∞–¥–∞—á—É ${jiraTaskKey}: ${jiraResult.error}`
      );
    }

    const jiraIssue = jiraResult.issue;
    const jiraUrl = `${jiraSettings.url.replace(
      /\/$/,
      ""
    )}/browse/${jiraTaskKey}`;

    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç (—Å —É—á—ë—Ç–æ–º –º–∞–ø–ø–∏–Ω–≥–æ–≤)
    const linkedProject = await this.getLinkedProject();

    // –°–æ–∑–¥–∞—ë–º Redmine –∑–∞–¥–∞—á—É
    const issueData = {
      projectId: linkedProject || redmineSettings.projectId || "1", // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç, –∑–∞—Ç–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π
      subject: `${jiraTaskKey}: ${jiraIssue.fields.summary}`,
      description: jiraUrl,
      jiraPriority: jiraIssue.fields.priority?.name,
      jiraStatus: jiraIssue.fields.status?.name,
    };

    const createIssueResult = await createIssue(issueData, redmineSettings);

    if (!createIssueResult.success) {
      throw new Error(
        `–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Redmine –∑–∞–¥–∞—á—É: ${createIssueResult.error}`
      );
    }

    const redmineTaskId = createIssueResult.issue.id;
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ Redmine –∑–∞–¥–∞—á–∞ #${redmineTaskId}`);

    return redmineTaskId;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ Redmine –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ URL JIRA
   */
  async getLinkedProject() {
    try {
      const jiraSettings = this.jiraManager.getSettings();
      const currentUrl = jiraSettings?.url || "";

      // –ü–æ–ª—É—á–∞–µ–º –º–∞–ø–ø–∏–Ω–≥–∏ –∏–∑ storage
      const result = await chrome.storage.local.get("jira_project_mappings");
      const mappings = result.jira_project_mappings || [];

      // –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –º–∞–ø–ø–∏–Ω–≥
      const normalizedUrl = currentUrl.toLowerCase().replace(/\/$/, "");
      const mapping = mappings.find((m) => {
        const mappingUrl = m.jiraUrl.toLowerCase().replace(/\/$/, "");
        return (
          normalizedUrl.includes(mappingUrl) ||
          mappingUrl.includes(normalizedUrl)
        );
      });

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π
      return mapping
        ? mapping.redmineProjectId
        : jiraSettings?.defaultProject || null;
    } catch (error) {
      console.error("Error getting linked project:", error);
      const jiraSettings = this.jiraManager.getSettings();
      return jiraSettings?.defaultProject || null;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å URL –¥–ª—è Jira –∑–∞–¥–∞—á–∏
   */
  getJiraUrl(jiraTask) {
    const jiraSettings = this.jiraManager.getSettings();
    if (!jiraSettings?.url) return "#";

    const baseUrl = jiraSettings.url.replace(/\/$/, "");
    return `${baseUrl}/browse/${jiraTask}`;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å URL –¥–ª—è Redmine –∑–∞–¥–∞—á–∏
   */
  getRedmineUrl(redmineTask) {
    const redmineSettings = this.redmineManager.getSettings();
    if (!redmineSettings?.url) return "#";

    const baseUrl = redmineSettings.url.replace(/\/$/, "");
    return `${baseUrl}/issues/${redmineTask}`;
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏ —Å —Ç–æ–π –∂–µ Jira –∑–∞–¥–∞—á–µ–π, –ø—Ä–æ—Å—Ç–∞–≤–∏–≤ –∏–º —Å–æ–∑–¥–∞–Ω–Ω—É—é Redmine –∑–∞–¥–∞—á—É
   */
  updateOtherEntriesWithSameJiraTask(jiraTask, redmineTaskId) {
    if (!this.lastResult?.comparison.missingInRedmine || !jiraTask) return;

    let updatedCount = 0;

    // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º –∑–∞–ø–∏—Å—è–º
    this.lastResult.comparison.missingInRedmine.forEach((entry) => {
      // –ï—Å–ª–∏ —É –∑–∞–ø–∏—Å–∏ —Ç–∞ –∂–µ Jira –∑–∞–¥–∞—á–∞ –∏ –Ω–µ—Ç Redmine –∑–∞–¥–∞—á–∏
      if (entry.jiraTask === jiraTask && !entry.redmineTask) {
        entry.redmineTask = redmineTaskId;
        updatedCount++;
      }
    });

    if (updatedCount > 0) {
      console.log(
        `‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ ${updatedCount} –∑–∞–ø–∏—Å–µ–π —Å Jira ${jiraTask}, –ø—Ä–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ Redmine –∑–∞–¥–∞—á–∞ #${redmineTaskId}`
      );

      // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
      this.displayMissingEntries(this.lastResult.comparison.missingInRedmine);
    }
  }

  /**
   * –£–±—Ä–∞—Ç—å –∑–∞–ø–∏—Å—å –∏–∑ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è
   */
  removeEntryFromDisplay(createdEntry) {
    if (!this.lastResult?.comparison.missingInRedmine) return;

    // –£–±–∏—Ä–∞–µ–º –∑–∞–ø–∏—Å—å –∏–∑ —Å–ø–∏—Å–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö
    const index = this.lastResult.comparison.missingInRedmine.findIndex(
      (entry) =>
        entry.date === createdEntry.date &&
        entry.hours === createdEntry.hours &&
        entry.jiraTask === createdEntry.jiraTask
    );

    if (index !== -1) {
      this.lastResult.comparison.missingInRedmine.splice(index, 1);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      this.lastResult.comparison.stats.missing--;
      this.lastResult.comparison.stats.missingHours -= createdEntry.hours;

      // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      this.displayResults(this.lastResult);
    }
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å –≤—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∑–∞–ø–∏—Å–∏ –º–∞—Å—Å–æ–≤–æ
   */
  async createAllMissingEntries() {
    if (!this.lastResult?.comparison.missingInRedmine?.length) {
      NotificationManager.error("–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è");
      return;
    }

    const button = this.elements.createAllButton;
    if (!button) return;

    const originalText = button.textContent;
    button.disabled = true;

    try {
      const missingEntries = this.lastResult.comparison.missingInRedmine;
      const totalEntries = missingEntries.length;

      button.textContent = `üîÑ –°–æ–∑–¥–∞—ë–º ${totalEntries} –∑–∞–ø–∏—Å–µ–π...`;

      NotificationManager.info(
        `üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ ${totalEntries} –∑–∞–ø–∏—Å–µ–π...`
      );

      // –®–∞–≥ 1: –°–æ–∑–¥–∞—ë–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ Redmine –∑–∞–¥–∞—á–∏
      const uniqueJiraTasks = await this.createUniqueRedmineTasks(
        missingEntries
      );

      // –®–∞–≥ 2: –°–æ–∑–¥–∞—ë–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –≤—Ä–µ–º–µ–Ω–∏
      const createdEntries = await this.createAllTimeEntries(
        missingEntries,
        uniqueJiraTasks
      );

      // –®–∞–≥ 3: –û–±–Ω–æ–≤–ª—è–µ–º UI
      this.updateUIAfterBulkCreation(createdEntries);

      NotificationManager.success(
        `‚úÖ –°–æ–∑–¥–∞–Ω–æ ${createdEntries.length} –∑–∞–ø–∏—Å–µ–π! üéâ`
      );
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è:", error);
      NotificationManager.error(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    } finally {
      button.textContent = originalText;
      button.disabled = false;
    }
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ Redmine –∑–∞–¥–∞—á–∏ –¥–ª—è Jira –∑–∞–¥–∞—á
   */
  async createUniqueRedmineTasks(missingEntries) {
    const redmineSettings = this.redmineManager.getSettings();
    const jiraSettings = this.jiraManager.getSettings();

    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ Jira –∑–∞–¥–∞—á–∏ –±–µ–∑ Redmine –∑–∞–¥–∞—á
    const uniqueJiraTasks = [
      ...new Set(
        missingEntries
          .filter((entry) => entry.jiraTask && !entry.redmineTask)
          .map((entry) => entry.jiraTask)
      ),
    ];

    if (uniqueJiraTasks.length === 0) {
      console.log("üéØ –ù–µ—Ç Jira –∑–∞–¥–∞—á –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Redmine –∑–∞–¥–∞—á");
      return {};
    }

    console.log(
      `üé´ –°–æ–∑–¥–∞—ë–º ${uniqueJiraTasks.length} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö Redmine –∑–∞–¥–∞—á...`
    );

    // –°–æ–∑–¥–∞—ë–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —á–µ—Ä–µ–∑ Promise.all
    const taskPromises = uniqueJiraTasks.map(async (jiraTask) => {
      try {
        const redmineTaskId = await this.createRedmineTaskForJira(
          jiraTask,
          redmineSettings,
          jiraSettings
        );
        return { jiraTask, redmineTaskId, success: true };
      } catch (error) {
        console.error(
          `‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Redmine –∑–∞–¥–∞—á–∏ –¥–ª—è ${jiraTask}:`,
          error
        );
        return { jiraTask, error: error.message, success: false };
      }
    });

    const results = await Promise.all(taskPromises);

    // –°–æ–∑–¥–∞—ë–º –º–∞–ø–ø–∏–Ω–≥ jiraTask -> redmineTaskId
    const taskMapping = {};
    let successCount = 0;
    let errorCount = 0;

    results.forEach((result) => {
      if (result.success) {
        taskMapping[result.jiraTask] = result.redmineTaskId;
        successCount++;
      } else {
        errorCount++;
      }
    });

    console.log(
      `‚úÖ –°–æ–∑–¥–∞–Ω–æ ${successCount} Redmine –∑–∞–¥–∞—á, –æ—à–∏–±–æ–∫: ${errorCount}`
    );

    if (errorCount > 0) {
      NotificationManager.warning(
        `‚ö†Ô∏è –°–æ–∑–¥–∞–Ω–æ ${successCount} –∑–∞–¥–∞—á, ${errorCount} –æ—à–∏–±–æ–∫`
      );
    }

    return taskMapping;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å ID –∑–∞–ø–∏—Å–∏ –¥–ª—è DOM —ç–ª–µ–º–µ–Ω—Ç–∞
   */
  getEntryId(entry) {
    return `entry-${entry.date}-${entry.hours}-${entry.jiraTask || "no-jira"}`;
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å –≤–∏–∑—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ
   */
  updateEntryVisualState(entry, state) {
    const entryId = this.getEntryId(entry);
    const row = document.querySelector(`[data-entry-id="${entryId}"]`);

    if (row) {
      // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
      row.classList.remove("creating", "created");

      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      if (state === "creating") {
        row.classList.add("creating");
        const btn = row.querySelector(".create-btn");
        if (btn) {
          btn.textContent = "–°–æ–∑–¥–∞—ë–º...";
          btn.disabled = true;
        }
      } else if (state === "created") {
        row.classList.add("created");
        const btn = row.querySelector(".create-btn");
        if (btn) {
          btn.textContent = "–°–æ–∑–¥–∞–Ω–æ";
          btn.disabled = true;
        }
      }
    }
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏ –≤—Ä–µ–º–µ–Ω–∏
   */
  async createAllTimeEntries(missingEntries, taskMapping) {
    const redmineSettings = this.redmineManager.getSettings();

    console.log(`‚è∞ –°–æ–∑–¥–∞—ë–º ${missingEntries.length} –∑–∞–ø–∏—Å–µ–π –≤—Ä–µ–º–µ–Ω–∏...`);

    // –°–æ–∑–¥–∞—ë–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –≤—Ä–µ–º–µ–Ω–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    const entryPromises = missingEntries.map(async (entry) => {
      try {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –∑–∞–ø–∏—Å—å —Å–æ–∑–¥–∞—ë—Ç—Å—è
        this.updateEntryVisualState(entry, "creating");

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º Redmine –∑–∞–¥–∞—á—É
        let redmineTaskId = entry.redmineTask;
        if (!redmineTaskId && entry.jiraTask && taskMapping[entry.jiraTask]) {
          redmineTaskId = taskMapping[entry.jiraTask];
        }

        // –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –≤—Ä–µ–º–µ–Ω–∏
        const timeEntryData = {
          date: entry.date,
          time: entry.hours,
          comment: entry.description,
          isResearch: false,
        };

        if (redmineTaskId) {
          timeEntryData.task = redmineTaskId.toString();
        } else {
          // –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–¥–∞—á–∏, —Å–æ–∑–¥–∞—ë–º –Ω–∞ —Å–≤—è–∑–∞–Ω–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ
          const linkedProject = await this.getLinkedProject();
          timeEntryData.projectId =
            linkedProject || redmineSettings.projectId || "1";
        }

        const createTimeResult = await createTimeEntry(
          timeEntryData,
          redmineSettings
        );

        if (createTimeResult.success) {
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –∑–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞
          this.updateEntryVisualState(entry, "created");

          return {
            originalEntry: entry,
            redmineTaskId,
            timeEntry: createTimeResult.timeEntry,
            success: true,
          };
        } else {
          throw new Error(createTimeResult.error);
        }
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –¥–ª—è ${entry.date}:`, error);
        return {
          originalEntry: entry,
          error: error.message,
          success: false,
        };
      }
    });

    const results = await Promise.all(entryPromises);

    const successfulEntries = results.filter((r) => r.success);
    const failedEntries = results.filter((r) => !r.success);

    console.log(
      `‚úÖ –°–æ–∑–¥–∞–Ω–æ ${successfulEntries.length} –∑–∞–ø–∏—Å–µ–π, –æ—à–∏–±–æ–∫: ${failedEntries.length}`
    );

    if (failedEntries.length > 0) {
      console.error("‚ùå –û—à–∏–±–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–µ–π:", failedEntries);
    }

    return successfulEntries;
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å UI –ø–æ—Å–ª–µ –º–∞—Å—Å–æ–≤–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è
   */
  updateUIAfterBulkCreation(createdEntries) {
    if (!this.lastResult?.comparison) return;

    // –£–±–∏—Ä–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö
    createdEntries.forEach(({ originalEntry }) => {
      const index = this.lastResult.comparison.missingInRedmine.findIndex(
        (entry) =>
          entry.date === originalEntry.date &&
          entry.hours === originalEntry.hours &&
          entry.jiraTask === originalEntry.jiraTask
      );

      if (index !== -1) {
        this.lastResult.comparison.missingInRedmine.splice(index, 1);
      }
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const createdCount = createdEntries.length;
    this.lastResult.comparison.stats.missing -= createdCount;
    this.lastResult.comparison.stats.missingHours -= createdEntries.reduce(
      (sum, { originalEntry }) => sum + originalEntry.hours,
      0
    );
    this.lastResult.comparison.stats.redmineTotal += createdCount;
    this.lastResult.comparison.stats.redmineHours += createdEntries.reduce(
      (sum, { originalEntry }) => sum + originalEntry.hours,
      0
    );
    this.lastResult.comparison.stats.matched += createdCount;

    // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    this.displayResults(this.lastResult);
  }

  /**
   * –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏ –≤ CSV
   */
  async exportMissingEntries() {
    if (!this.lastResult?.comparison.missingInRedmine) {
      NotificationManager.error("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞");
      return;
    }

    try {
      const missing = this.lastResult.comparison.missingInRedmine;
      const period = this.lastResult.period;

      // –°–æ–∑–¥–∞—ë–º CSV
      const headers = [
        "–î–∞—Ç–∞",
        "–í—Ä–µ–º—è",
        "–û–ø–∏—Å–∞–Ω–∏–µ",
        "Jira –∑–∞–¥–∞—á–∞",
        "Redmine –∑–∞–¥–∞—á–∞",
      ];
      const rows = missing.map((entry) => [
        entry.date,
        entry.hours.toFixed(2),
        `"${(entry.description || "").replace(/"/g, '""')}"`,
        entry.jiraTask || "",
        entry.redmineTask || "",
      ]);

      const csvContent = [headers, ...rows]
        .map((row) => row.join(","))
        .join("\n");

      // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
      const blob = new Blob([csvContent], { type: "text/csv;charset=utf-8;" });
      const url = URL.createObjectURL(blob);

      const a = document.createElement("a");
      a.href = url;
      a.download = `missing-entries-${period.year}-${period.month
        .toString()
        .padStart(2, "0")}.csv`;
      a.click();

      URL.revokeObjectURL(url);

      NotificationManager.success(
        `‚úÖ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${missing.length} –∑–∞–ø–∏—Å–µ–π`
      );
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:", error);
      NotificationManager.error(`‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: ${error.message}`);
    }
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
   */
  clearResults() {
    if (this.elements.resultsContainer) {
      this.elements.resultsContainer.style.display = "none";
    }

    [this.elements.summaryContainer, this.elements.missingContainer].forEach(
      (container) => {
        if (container) container.innerHTML = "";
      }
    );

    if (this.elements.createAllButton) {
      this.elements.createAllButton.disabled = true;
    }
    if (this.elements.exportButton) {
      this.elements.exportButton.disabled = true;
    }

    this.lastResult = null;
  }
}

export default SimpleTimeComparisonManager;
