/**
 * DOM Utilities - –æ–±—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å DOM
 */

/**
 * –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ—è–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ DOM
 * @param {string} selector - CSS —Å–µ–ª–µ–∫—Ç–æ—Ä
 * @returns {Promise<Element>} - Promise —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º —ç–ª–µ–º–µ–Ω—Ç–æ–º
 */
function waitElement(selector) {
  const hasElement = (resolve) => {
    const element = document.querySelector(selector);
    if (element) {
      resolve(element);
    }
  };

  return new Promise((resolve) => {
    hasElement(resolve);

    const observer = new MutationObserver(() => {
      hasElement(resolve);
    });
    observer.observe(document.body, { childList: true, subtree: true });
  });
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ SVG –∏–∫–æ–Ω–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞
 * @param {HTMLElement} button - –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –∏–∫–æ–Ω–∫–∏
 * @param {string} iconName - –ò–º—è —Ñ–∞–π–ª–∞ –∏–∫–æ–Ω–∫–∏ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
 */
async function loadSVGIcon(button, iconName) {
  try {
    const iconUrl = chrome.runtime.getURL(`images/icons/${iconName}.svg`);
    const response = await fetch(iconUrl);
    const svgContent = await response.text();
    button.innerHTML = svgContent;
  } catch (error) {
    console.error(`Error loading ${iconName} icon:`, error);
    // Fallback - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–º–æ–¥–∑–∏
    button.textContent = iconName === "branch" ? "üåø" : "üìù";
  }
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
 * @param {string} message - –¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
 * @param {string} type - –¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (success, error, warning, info)
 */
function showNotification(message, type = "info") {
  const notification = document.createElement("div");
  notification.className = `jira-notification notification-${type}`;
  notification.textContent = message;

  document.body.appendChild(notification);

  // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
  setTimeout(() => notification.classList.add("show"), 10);

  // –£–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
  setTimeout(() => {
    notification.classList.remove("show");
    setTimeout(() => {
      if (notification.parentNode) {
        document.body.removeChild(notification);
      }
    }, 300);
  }, 3000);
}

/**
 * –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º
 * @param {string} text - –¢–µ–∫—Å—Ç –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
 * @param {string} successMessage - –°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏
 * @param {string} errorMessage - –°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
 */
async function copyToClipboard(text, successMessage, errorMessage) {
  try {
    await navigator.clipboard.writeText(text);
    showNotification(successMessage, "success");
  } catch (error) {
    console.error("Error copying to clipboard:", error);
    showNotification(errorMessage, "error");
  }
}
