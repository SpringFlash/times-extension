/**
 * Jira Content Script - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö Redmine –∑–∞–¥–∞—á
 */

class JiraIntegration {
  constructor() {
    this.currentTaskId = null;
    this.currentTaskUrl = null;
    this.redmineSettings = null;
    this.linkedTask = null;
    this.uiContainer = null;

    this.init();
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è content script
   */
  async init() {
    console.log("üé´ Jira Integration: Initializing...");

    // –ñ–¥–µ–º –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if (document.readyState === "loading") {
      document.addEventListener("DOMContentLoaded", () => this.start());
    } else {
      this.start();
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
   */
  async start() {
    try {
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –∑–∞–¥–∞—á–µ
      this.extractTaskInfo();

      if (!this.currentTaskId) {
        console.log("üé´ Jira Integration: No task ID found");
        return;
      }

      console.log(`üé´ Jira Integration: Found task ${this.currentTaskId}`);

      // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Redmine –∏ Jira
      await this.loadRedmineSettings();
      await this.loadJiraSettings();

      if (
        !this.redmineSettings ||
        !this.redmineSettings.url ||
        !this.redmineSettings.apiKey
      ) {
        console.log("üé´ Jira Integration: Redmine not configured");
        return;
      }

      // –ò—â–µ–º —Å–≤—è–∑–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É
      await this.searchLinkedTask();

      // –°–æ–∑–¥–∞–µ–º UI
      this.createUI();
    } catch (error) {
      console.error("üé´ Jira Integration Error:", error);
    }
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–¥–∞—á–µ –∏–∑ URL –∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
   */
  extractTaskInfo() {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞–¥–∞—á–∏ –∏–∑ URL
    const urlMatch = window.location.href.match(/\/browse\/([A-Z]+-\d+)/);
    if (urlMatch) {
      this.currentTaskId = urlMatch[1];
      this.currentTaskUrl = window.location.href;

      // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ
      this.extractJiraTaskDetails();
    }
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π Jira –∑–∞–¥–∞—á–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Redmine –∑–∞–¥–∞—á–∏
   */
  extractJiraTaskDetails() {
    try {
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
      const titleSelectors = [
        '[data-testid="issue.views.issue-base.foundation.summary.heading"]',
        'h1[data-testid*="summary"]',
        ".issue-header h1",
        "#summary-val",
        ".issue-title",
      ];

      let title = "";
      for (const selector of titleSelectors) {
        const element = document.querySelector(selector);
        if (element) {
          title = element.textContent?.trim() || "";
          break;
        }
      }

      // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç/—Å–ª–æ–∂–Ω–æ—Å—Ç—å
      const prioritySelectors = [
        '[data-testid="issue.views.field.priority.common.ui.priority-field-view"]',
        ".priority .value",
        '[data-field-id="priority"]',
      ];

      let priority = "";
      for (const selector of prioritySelectors) {
        const element = document.querySelector(selector);
        if (element) {
          priority = element.textContent?.trim() || "";
          break;
        }
      }

      // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç–∞—Ç—É—Å
      const statusSelectors = [
        '[data-testid="issue.views.field.status.common.ui.status-lozenge"]',
        ".status .value",
        '[data-field-id="status"]',
      ];

      let status = "";
      for (const selector of statusSelectors) {
        const element = document.querySelector(selector);
        if (element) {
          status = element.textContent?.trim() || "";
          break;
        }
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      this.jiraTaskDetails = {
        title: title || this.currentTaskId,
        priority: priority,
        status: status,
        url: this.currentTaskUrl,
      };

      console.log("üé´ Extracted Jira task details:", this.jiraTaskDetails);
    } catch (error) {
      console.error("Error extracting Jira task details:", error);
      this.jiraTaskDetails = {
        title: this.currentTaskId,
        priority: "",
        status: "",
        url: this.currentTaskUrl,
      };
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Redmine –∏–∑ storage
   */
  async loadRedmineSettings() {
    try {
      const result = await chrome.storage.local.get("redmine_settings");
      this.redmineSettings = result.redmine_settings || {};
    } catch (error) {
      console.error("Error loading Redmine settings:", error);
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Jira –∏–∑ storage
   */
  async loadJiraSettings() {
    try {
      const result = await chrome.storage.local.get("jira_settings");
      this.jiraSettings = result.jira_settings || {};
    } catch (error) {
      console.error("Error loading Jira settings:", error);
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ UI —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
   */
  createUI() {
    // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π UI –µ—Å–ª–∏ –µ—Å—Ç—å
    this.removeExistingUI();

    // –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—É—é –ø–ª–∞—à–∫—É
    this.uiContainer = document.createElement("div");
    this.uiContainer.id = "redmine-integration-badge";
    this.uiContainer.className = "redmine-badge";

    if (this.linkedTask) {
      // –ù–∞–π–¥–µ–Ω–∞ —Å–≤—è–∑–∞–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞
      this.uiContainer.innerHTML = `
        <div class="redmine-badge-content found" data-task-id="${this.linkedTask.id}">
          <span class="badge-icon">üîó</span>
          <span class="badge-text">
            <strong>Redmine #${this.linkedTask.id}</strong>
            <small>${this.linkedTask.subject}</small>
          </span>
        </div>
      `;

      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞
      this.uiContainer.addEventListener("click", () => {
        const url = `${this.redmineSettings.url}/issues/${this.linkedTask.id}`;
        window.open(url, "_blank");
      });
    } else {
      // –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
      this.uiContainer.innerHTML = `
        <div class="redmine-badge-content not-found">
          <span class="badge-icon">‚ûï</span>
          <span class="badge-text">
            <strong>Create Redmine Task</strong>
            <small>No linked task found</small>
          </span>
        </div>
      `;

      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
      this.uiContainer.addEventListener("click", () => {
        this.createRedmineTask();
      });
    }

    setTimeout(() => {
      // –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ UI
      const targetContainer = this.findInsertionPoint();

      if (!targetContainer) {
        console.warn("üé´ Jira Integration: Could not find insertion point");
        return;
      }

      console.log("üé´ Jira Integration: DOM loaded");
      targetContainer.insertBefore(
        this.uiContainer,
        targetContainer.firstChild
      );
    }, 7000);

    console.log("üé´ Jira Integration: Badge created and inserted");
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ UI
   */
  removeExistingUI() {
    const existingBadge = document.getElementById("redmine-integration-badge");
    if (existingBadge) {
      existingBadge.remove();
      console.log("üé´ Jira Integration: Removed existing badge");
    }
  }

  /**
   * –ü–æ–∏—Å–∫ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –º–µ—Å—Ç–∞ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ UI
   */
  findInsertionPoint() {
    // –ò—â–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–¥–∞—á–∏ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Ä—è–¥–æ–º
    const titleSelectors = [
      '[data-testid="issue-view-product-templates-default.ui.foundation-content.foundation-content-wrapper"]',
      'h1[data-testid*="summary"]',
      ".issue-header h1",
      "#summary-val",
      ".issue-title",
    ];

    for (const selector of titleSelectors) {
      const element = document.querySelector(selector);
      if (element) {
        return element.parentElement || element;
      }
    }

    // Fallback - –∏—â–µ–º –ª—é–±–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    const fallbackSelectors = [
      ".issue-header-content",
      ".issue-body-content",
      ".aui-page-panel-content",
      "#issue-content",
      ".issue-main-column",
    ];

    for (const selector of fallbackSelectors) {
      const element = document.querySelector(selector);
      if (element) {
        return element;
      }
    }

    // –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback - –≤—Å—Ç–∞–≤–ª—è–µ–º –≤ body
    return document.body;
  }

  /**
   * –ü–æ–∏—Å–∫ —Å–≤—è–∑–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏ –≤ Redmine
   */
  async searchLinkedTask() {
    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ background script –¥–ª—è –ø–æ–∏—Å–∫–∞
      const response = await chrome.runtime.sendMessage({
        action: "searchInRedmine",
        query: this.currentTaskUrl,
      });

      if (response.success && response.issues && response.issues.length > 0) {
        this.linkedTask = response.issues[0]; // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É
        return;
      }

      // –ü—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫ –ø–æ ID –∑–∞–¥–∞—á–∏
      const fallbackResponse = await chrome.runtime.sendMessage({
        action: "searchInRedmine",
        query: this.currentTaskId,
      });

      if (
        fallbackResponse.success &&
        fallbackResponse.issues &&
        fallbackResponse.issues.length > 0
      ) {
        this.linkedTask = fallbackResponse.issues[0]; // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É
      } else {
        this.linkedTask = null; // –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
      }
    } catch (error) {
      console.error("Error searching linked task:", error);
      this.linkedTask = null;
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –≤ Redmine —á–µ—Ä–µ–∑ API
   */
  async createRedmineTask() {
    if (!this.redmineSettings.url || !this.redmineSettings.apiKey) {
      this.showNotification("‚ùå Redmine not configured", "error");
      return;
    }

    try {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
      const badge = this.uiContainer.querySelector(".redmine-badge-content");
      const originalContent = badge.innerHTML;
      badge.innerHTML = `
        <span class="badge-icon">üîÑ</span>
        <span class="badge-text">
          <strong>Creating Task...</strong>
          <small>Please wait</small>
        </span>
      `;
      badge.style.pointerEvents = "none";

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
      const taskData = this.prepareRedmineTaskData();

      console.log("üé´ Jira Integration: Task data:", taskData);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ
      const result = await chrome.runtime.sendMessage({
        action: "createRedmineIssue",
        data: taskData,
      });

      if (result.success) {
        // –û–±–Ω–æ–≤–ª—è–µ–º UI –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏
        this.linkedTask = result.issue;
        this.updateBadgeToFound();
        this.showNotification(
          `‚úÖ Created Redmine task #${result.issue.id}`,
          "success"
        );
      } else {
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        badge.innerHTML = originalContent;
        badge.style.pointerEvents = "auto";
        this.showNotification(
          `‚ùå Failed to create task: ${result.error}`,
          "error"
        );
      }
    } catch (error) {
      console.error("Error creating Redmine task:", error);
      this.showNotification(`‚ùå Error: ${error.message}`, "error");

      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      const badge = this.uiContainer.querySelector(".redmine-badge-content");
      badge.innerHTML = `
        <span class="badge-icon">‚ûï</span>
        <span class="badge-text">
          <strong>Create Redmine Task</strong>
          <small>No linked task found</small>
        </span>
      `;
      badge.style.pointerEvents = "auto";
    }
  }

  /**
   * –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Redmine –∑–∞–¥–∞—á–∏
   */
  prepareRedmineTaskData() {
    const description = this.currentTaskUrl;

    return {
      subject: this.jiraTaskDetails.title,
      description: description,
      projectId:
        this.jiraSettings?.linkedProject ||
        this.redmineSettings.defaultProject ||
        "1", // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–µ–∫—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
      jiraPriority: this.jiraTaskDetails.priority, // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –º–∞–ø–ø–∏–Ω–≥–∞ –≤ redmine.js
      jiraStatus: this.jiraTaskDetails.status, // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–ª—è –±—É–¥—É—â–µ–≥–æ –º–∞–ø–ø–∏–Ω–≥–∞
    };
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–ª–∞—à–∫–∏ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
   */
  updateBadgeToFound() {
    const badge = this.uiContainer.querySelector(".redmine-badge-content");
    badge.className = "redmine-badge-content found";
    badge.innerHTML = `
      <span class="badge-icon">üîó</span>
      <span class="badge-text">
        <strong>Redmine #${this.linkedTask.id}</strong>
        <small>${this.linkedTask.subject}</small>
      </span>
    `;
    badge.style.pointerEvents = "auto";

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞
    this.uiContainer.removeEventListener("click", this.createRedmineTask);
    this.uiContainer.addEventListener("click", () => {
      const url = `${this.redmineSettings.url}/issues/${this.linkedTask.id}`;
      window.open(url, "_blank");
    });
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
   */
  showNotification(message, type = "info") {
    const notification = document.createElement("div");
    notification.className = `jira-notification notification-${type}`;
    notification.textContent = message;

    document.body.appendChild(notification);

    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
    setTimeout(() => notification.classList.add("show"), 10);

    // –£–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
      notification.classList.remove("show");
      setTimeout(() => {
        if (notification.parentNode) {
          document.body.removeChild(notification);
        }
      }, 300);
    }, 3000);
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
new JiraIntegration();
